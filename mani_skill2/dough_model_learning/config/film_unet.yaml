defaults:
  - user: blake 


hydra:
  run:
    dir: ${user.run_dir}

module:
  _target_: mani_skill2.dynamics.modules.DynamicsPLModule
  lr: 1e-3
  dynamics_model:
    _target_: mani_skill2.dynamics.network_dynamics_model.NetworkDynamicsModel
    is_residual: True
    state_normalizer:
      _target_: mani_skill2.dynamics.normalizers.HeightMapNormalizer
    output_normalizer:
      _target_: mani_skill2.dynamics.normalizers.HeightMapNormalizer
    action_normalizer:
      _target_: mani_skill2.dynamics.normalizers.AffineNormalizer
      lo: null
      up: null
    network:
      _target_: mani_skill2.dynamics.networks.UnetFiLM
      n_channels: 1
      cond_size: 10
  visualizer:
    _target_: mani_skill2.dynamics.visualizers.HeightMapDynamicsPLVisualizer
    log_every_n_steps: 1000

data:
  train_loader:
    _target_: torch.utils.data.DataLoader
    batch_size: 50
    shuffle: True
    dataset:
      _target_: mani_skill2.data.sample_batch_dataset.SampleBatchDataset
      inputs: ${user.train_dataset_input}
      debug_size: null
      debug_size_mode: "ordered"
  val_loader:
    _target_: torch.utils.data.DataLoader
    batch_size: 500
    shuffle: False
    dataset:
      _target_: mani_skill2.data.sample_batch_dataset.SampleBatchDataset
      inputs: ${user.val_dataset_input}
      debug_size: null
      debug_size_mode: "ordered"

trainer:
  _target_: pytorch_lightning.Trainer
  devices: 1
  accelerator: "gpu"
  max_epochs: 1000
  gradient_clip_val: 10.0
  track_grad_norm: 2

logging:
  project: model_based_dough_rolling
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_model_based_dough
  id: null
  group: null

eval:
  env:
    _target_: mani_skill2.envs.mpm.rolling_env.RollingEnv
    sim_freq: 200
    mpm_freq: 1000
    dough_initializer:
      _target_: mani_skill2.dough_model_learning.generate_dough_rolling_data.CircularConeHeightMapGenerator
      radius: 0.1
      height: 0.06
    obs_height_map_dx: 0.01
    obs_height_map_grid_size: [32, 32]
  algorithm:
    # TODO(blake.wulfe): Figure out if you can use hydra.instantiate for this.
    # _target_: mani_skill2.algorithms.random_shooting.RandomShootingAgent
    # generative_env:
    #   _target_: mani_skill2.dynamics.generative_env
    # action_sampler:
    #   _target_: mani_skill2.algorithms.action_samplers.RandomDoughRollingActionSampler
    #   # TODO(blake.wulfe): Avoid hardcoding this.
    #   action_size: 10
  device: "cuda"
  checkpoint: ${user.eval_checkpoint}
  # checkpoint: null
  num_episodes: 5
  max_num_steps: 5
